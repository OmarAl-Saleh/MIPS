module mux_32to1 (
    input wire [31:0] data_inputs [31:0],
    input wire [4:0] select,
    output wire[31:0] mux_output
);

reg [31:0] mux_output_reg;

always @ (select or data_inputs) begin
    case (select)
        5'b00000: mux_output_reg = data_inputs[0];
        5'b00001: mux_output_reg = data_inputs[1];
        5'b00010: mux_output_reg = data_inputs[2];
        5'b00011: mux_output_reg = data_inputs[3];
        5'b00100: mux_output_reg = data_inputs[4];
        5'b00101: mux_output_reg = data_inputs[5];
        5'b00110: mux_output_reg = data_inputs[6];
        5'b00111: mux_output_reg = data_inputs[7];
        5'b01000: mux_output_reg = data_inputs[8];
        5'b01001: mux_output_reg = data_inputs[9];
        5'b01010: mux_output_reg = data_inputs[10];
        5'b01011: mux_output_reg = data_inputs[11];
        5'b01100: mux_output_reg = data_inputs[12];
        5'b01101: mux_output_reg = data_inputs[13];
        5'b01110: mux_output_reg = data_inputs[14];
        5'b01111: mux_output_reg = data_inputs[15];
        5'b10000: mux_output_reg = data_inputs[16];
        5'b10001: mux_output_reg = data_inputs[17];
        5'b10010: mux_output_reg = data_inputs[18];
        5'b10011: mux_output_reg = data_inputs[19];
        5'b10100: mux_output_reg = data_inputs[20];
        5'b10101: mux_output_reg = data_inputs[21];
        5'b10110: mux_output_reg = data_inputs[22];
        5'b10111: mux_output_reg = data_inputs[23];
        5'b11000: mux_output_reg = data_inputs[24];
        5'b11001: mux_output_reg = data_inputs[25];
        5'b11010: mux_output_reg = data_inputs[26];
        5'b11011: mux_output_reg = data_inputs[27];
        5'b11100: mux_output_reg = data_inputs[28];
        5'b11101: mux_output_reg = data_inputs[29];
        5'b11110: mux_output_reg = data_inputs[30];
        5'b11111: mux_output_reg = data_inputs[31];
        default: mux_output_reg = 32'b0;
    endcase
end

assign mux_output = mux_output_reg;

endmodule
